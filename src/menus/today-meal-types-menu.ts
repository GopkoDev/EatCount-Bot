import { InlineKeyboard } from 'grammy';
import type { MyContext } from '../types.js';
import type { MealType } from '@prisma/client';
import { translateMealTypeToUkrainian } from '../helpers/meal-type-translator.js';

export const showTodayMealTypes = async (
  ctx: MyContext,
  mealTypes: MealType[]
) => {
  if (mealTypes.length === 0) {
    const keyboard = new InlineKeyboard().text(
      '‚Ü©Ô∏è –î–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è',
      'back_to_edit_menu'
    );

    await ctx.reply('–°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –ø—Ä–∏–π–æ–º—ñ–≤ —ó–∂—ñ', {
      reply_markup: keyboard,
    });
    return;
  }

  const keyboard = new InlineKeyboard();

  mealTypes.forEach((mealType) => {
    const translatedType = translateMealTypeToUkrainian(mealType);
    keyboard
      .text(
        `${getEmojiForMealType(mealType)} ${translatedType}`,
        `edit_today_${mealType}`
      )
      .row();
  });

  keyboard.text('‚Ü©Ô∏è –î–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'back_to_edit_menu');

  await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–π–æ–º—É —ó–∂—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', {
    reply_markup: keyboard,
  });
};

function getEmojiForMealType(mealType: MealType): string {
  switch (mealType) {
    case 'BREAKFAST':
      return 'üç≥';
    case 'LUNCH':
      return 'üçù';
    case 'DINNER':
      return 'üçΩÔ∏è';
    case 'SNACK':
      return 'üçå';
    default:
      return 'üç¥';
  }
}
