import { InlineKeyboard } from 'grammy';
import type { MyContext } from '../types.js';
import type { Meal, MealType } from '@prisma/client';
import { translateMealTypeToUkrainian } from '../helpers/meal-type-translator.js';
import { DateTime } from 'luxon';

const formatMealDate = (date: Date): string => {
  return DateTime.fromJSDate(date)
    .setZone('Europe/Kiev')
    .setLocale('uk')
    .toFormat('dd.MM.yyyy HH:mm');
};

export const showEditMealsMenu = async (ctx: MyContext) => {
  const keyboard = new InlineKeyboard()
    .text('üïí –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ', 'edit_today_meals')
    .row()
    .text('üìú –û—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–∏–π–æ–º–∏', 'edit_recent_meals')
    .row()
    .text('‚Ü©Ô∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'back_to_main_menu');

  await ctx.reply('–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ –≤–∏ –±–∞–∂–∞—î—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:', {
    reply_markup: keyboard,
  });
};

export const showMealsList = async (
  ctx: MyContext,
  meals: Meal[],
  page: number = 0,
  isLastPage: boolean = false
) => {
  if (meals.length === 0) {
    const keyboard = new InlineKeyboard().text(
      '‚Ü©Ô∏è –î–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è',
      'back_to_edit_menu'
    );

    await ctx.reply('–ü—Ä–∏–π–æ–º–∏ —ó–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ', { reply_markup: keyboard });
    return;
  }

  const ITEMS_PER_PAGE = 10;
  const startIdx = page * ITEMS_PER_PAGE;
  const endIdx = Math.min(startIdx + ITEMS_PER_PAGE, meals.length);
  const currentMeals = meals.slice(startIdx, endIdx);

  const keyboard = new InlineKeyboard();

  for (const meal of currentMeals) {
    const mealDate = formatMealDate(meal.timestamp);
    const mealType = translateMealTypeToUkrainian(meal.type as MealType);
    const mealDescription = meal.description || '–ë–µ–∑ –æ–ø–∏—Å—É';
    keyboard
      .text(
        `${mealType}: ${mealDate} ${mealDescription}`,
        `edit_meal_${meal.id}`
      )
      .row();
  }

  if (page > 0 || !isLastPage) {
    if (page > 0) {
      keyboard.text('‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è', `prev_page_${page - 1}`);
    }

    if (!isLastPage) {
      keyboard.text('–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è', `next_page_${page + 1}`);
    }

    keyboard.row();
  }

  keyboard.text('‚Ü©Ô∏è –î–æ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'back_to_edit_menu');

  await ctx.reply(
    `–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–π–æ–º —ó–∂—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ ${page + 1}):`,
    { reply_markup: keyboard }
  );
};

export const showEditMealMenu = async (ctx: MyContext, meal: Meal) => {
  const mealDate = formatMealDate(meal.timestamp);
  const mealType = translateMealTypeToUkrainian(meal.type as MealType);

  const keyboard = new InlineKeyboard()
    .text('‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å', `edit_description_${meal.id}`)
    .row()
    .text('üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø', `change_type_${meal.id}`)
    .row()
    .text('üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ', `delete_meal_${meal.id}`)
    .row()
    .text('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É', 'back_to_meals_list');

  await ctx.reply(
    `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏–π–æ–º—É —ó–∂—ñ:\n${mealType}, ${mealDate}\n"${meal.description}"`,
    { reply_markup: keyboard }
  );
};

export const showChangeMealTypeMenu = async (
  ctx: MyContext,
  mealId: string
) => {
  const keyboard = new InlineKeyboard()
    .text('üç≥ –°–Ω—ñ–¥–∞–Ω–æ–∫', `set_type_BREAKFAST_${mealId}`)
    .row()
    .text('üçù –û–±—ñ–¥', `set_type_LUNCH_${mealId}`)
    .row()
    .text('üçΩÔ∏è –í–µ—á–µ—Ä—è', `set_type_DINNER_${mealId}`)
    .row()
    .text('üçå –ü–µ—Ä–µ–∫—É—Å', `set_type_SNACK_${mealId}`)
    .row()
    .text('‚Ü©Ô∏è –ù–∞–∑–∞–¥', `back_to_edit_meal_${mealId}`);

  await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–∏–ø –ø—Ä–∏–π–æ–º—É —ó–∂—ñ:', { reply_markup: keyboard });
};

export const confirmMealDeletion = async (ctx: MyContext, mealId: string) => {
  const keyboard = new InlineKeyboard()
    .text('‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏', `confirm_delete_meal_${mealId}`)
    .row()
    .text('‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏', `back_to_edit_meal_${mealId}`);

  await ctx.reply(
    `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ? –¶—è –¥—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.`,
    { reply_markup: keyboard }
  );
};
