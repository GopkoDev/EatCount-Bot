generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                      @id @default(cuid())
  name                     String?
  photoUrl                 String?                     @map("photo_url")
  verified                 DateTime?                   @map("verified")
  twoFactorEnabled         Boolean                     @default(false)
  twoFactorSecret          String?
  telegramId               String?                     @unique
  telegramUsername         String?                     @map("telegram_username")
  languageCode             String?                     @map("language_code")
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  targets                  Target[]
  meals                    Meal[]
  refreshTokens            RefreshToken[]
  apiRequests              ApiRequestLog[]
  FaildSearchInFatSecretDb FaildSearchByFatSecretApi[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Target {
  id            String @id @default(uuid())
  userId        String @unique
  calorieTarget Int
  User          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("targets")
}

model Meal {
  id          String   @id @default(uuid())
  userId      String
  type        MealType
  timestamp   DateTime
  description String

  totalCalories Int
  totalProtein  Float
  totalFat      Float
  totalCarbs    Float

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     MealItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meals")
}

model MealItem {
  id          String @id @default(uuid())
  mealId      String
  name        String
  amountGrams Float

  calories Float
  protein  Float
  fat      Float
  carbs    Float

  saturatedFat       Float
  polyunsaturatedFat Float
  monounsaturatedFat Float
  cholesterol        Float
  sodium             Float
  potassium          Float
  fiber              Float
  sugar              Float
  vitaminA           Float
  vitaminC           Float
  calcium            Float
  iron               Float
  transFat           Float?
  addedSugars        Float?
  vitaminD           Float?

  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model ApiRequestLog {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  userId    String

  model            String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  queryText        String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_request_logs")
}

model FaildSearchByFatSecretApi {
  id        String   @id @default(uuid())
  userId    String
  timestamp DateTime @default(now())

  name            String
  weight          Float
  query           String
  additionalTerms String[]
  excludeTerms    String[]
  errorMessage    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("failed_search_in_fat_secret")
}
