import type { PrismaClient } from '@prisma/client';
import type { MyContext } from '../../../../types.js';
import { getUserFromDb } from '../../../../helpers/get-user-from-db.js';
import {
  getRangeByKeyType,
  getAllDatesInWeek,
  timeZone,
  formatDateToKey,
} from '../helpers/get-time-ranges.js';

type KeyType = 'stats_this_week' | 'stats_last_week';

export const statsWeekService = async (
  ctx: MyContext,
  db: PrismaClient,
  key: KeyType
) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply(
      '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.'
    );
    return;
  }

  const user = await getUserFromDb(userId, db);

  const { startOfWeekUTC, endOfWeekUTC, weekRangeKyiv } =
    getRangeByKeyType(key);

  if (!startOfWeekUTC || !endOfWeekUTC) {
    throw new Error('[WEEK STATS] Invalid date range');
  }

  try {
    // Get the user's calorie target if set
    const target = await db.target.findFirst({
      where: { userId: user.id },
    });

    const meals = await db.meal.findMany({
      where: {
        userId: user.id,
        timestamp: {
          gte: startOfWeekUTC,
          lt: endOfWeekUTC,
        },
      },
      include: {
        items: true,
      },
    });

    if (meals.length === 0) {
      const message = target
        ? `–ó–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –≤–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–π–æ–º—É —ó–∂—ñ.\n–í–∞—à–∞ —â–æ–¥–µ–Ω–Ω–∞ —Ü—ñ–ª—å: ${target.calorieTarget} –∫–∫–∞–ª.`
        : '–ó–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –≤–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–π–æ–º—É —ó–∂—ñ.';
      await ctx.reply(message);
      return;
    }

    let totalCalories = 0;
    let totalProtein = 0;
    let totalFat = 0;
    let totalCarbs = 0;

    const dailyStats: Record<
      string,
      { calories: number; protein: number; fat: number; carbs: number }
    > = {};

    meals.forEach((meal) => {
      totalCalories += meal.totalCalories;
      totalProtein += meal.totalProtein;
      totalFat += meal.totalFat;
      totalCarbs += meal.totalCarbs;

      const dateKey = formatDateToKey(meal.timestamp);
      if (!dailyStats[dateKey]) {
        dailyStats[dateKey] = { calories: 0, protein: 0, fat: 0, carbs: 0 };
      }
      dailyStats[dateKey].calories += meal.totalCalories;
      dailyStats[dateKey].protein += meal.totalProtein;
      dailyStats[dateKey].fat += meal.totalFat;
      dailyStats[dateKey].carbs += meal.totalCarbs;
    });

    const proteinCalories = totalProtein * 4;
    const fatCalories = totalFat * 9;
    const carbCalories = totalCarbs * 4;

    const proteinPercentage = ((proteinCalories / totalCalories) * 100).toFixed(
      1
    );
    const fatPercentage = ((fatCalories / totalCalories) * 100).toFixed(1);
    const carbPercentage = ((carbCalories / totalCalories) * 100).toFixed(1);

    const allDates = getAllDatesInWeek(startOfWeekUTC);

    const fullDailyMessages = allDates.map((date) => {
      if (dailyStats[date]) {
        const { calories, protein, fat, carbs } = dailyStats[date];
        return `üìÖ ${new Date(date).toLocaleDateString('uk-UA', {
          day: '2-digit',
          month: 'long',
        })}: ‚ö°: ${calories.toFixed(1)} | ü•©: ${protein.toFixed(
          1
        )} –≥ | üßà: ${fat.toFixed(1)} –≥ | üçû: ${carbs.toFixed(1)} –≥`;
      } else {
        return `üìÖ ${new Date(date).toLocaleDateString('uk-UA', {
          day: '2-digit',
          month: 'long',
        })}: –í—ñ–¥—Å—É—Ç–Ω—ñ –ø—Ä–∏–π–æ–º–∏ —ó–∂—ñ`;
      }
    });

    // Calculate weekly statistics
    let targetInfo = '';
    if (target) {
      const weeklyTarget = target.calorieTarget * 7; // 7 days per week
      const remaining = weeklyTarget - totalCalories;
      const percentConsumed = Math.min(
        100,
        (totalCalories / weeklyTarget) * 100
      ).toFixed(1);

      // Create visual progress bar for weekly target
      const filledCount = Math.round(parseFloat(percentConsumed) / 10);
      const emptyCount = 10 - filledCount;
      const progressBar = 'üü©'.repeat(filledCount) + '‚¨ú'.repeat(emptyCount);

      const statusEmoji = remaining > 0 ? 'üí´' : remaining === 0 ? '‚úÖ' : '‚ö†Ô∏è';
      const statusText =
        remaining > 0
          ? `–ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${remaining.toFixed(1)} –∫–∫–∞–ª`
          : remaining === 0
          ? `–¢–∏–∂–Ω–µ–≤–∞ —Ü—ñ–ª—å –≤–∏–∫–æ–Ω–∞–Ω–∞!`
          : `–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–∞: ${Math.abs(remaining).toFixed(1)} –∫–∫–∞–ª`;

      targetInfo =
        `\nüéØ –¢–∏–∂–Ω–µ–≤–∞ —Ü—ñ–ª—å: ${weeklyTarget} –∫–∫–∞–ª\n` +
        `${progressBar} ${percentConsumed}%\n` +
        `${statusEmoji} ${statusText}\n`;
    }

    const message =
      `üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (${weekRangeKyiv}):\n\n` +
      `‚ö° –ö–∞–ª–æ—Ä—ñ—ó: ${totalCalories.toFixed(1)} –∫–∫–∞–ª\n` +
      `ü•© –ë—ñ–ª–∫–∏: ${totalProtein.toFixed(1)} –≥  (${proteinPercentage}%)\n` +
      `üßà –ñ–∏—Ä–∏: ${totalFat.toFixed(1)} –≥  (${fatPercentage}%)\n` +
      `üçû –í—É–≥–ª–µ–≤–æ–¥–∏: ${totalCarbs.toFixed(1)} –≥  (${carbPercentage}%)` +
      `${targetInfo}\n\n` +
      fullDailyMessages.join('\n');

    await ctx.reply(message);
  } catch (error) {
    console.error('Error fetching weekly statistics:', error);
    await ctx.reply(
      '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
    );
  }
};
