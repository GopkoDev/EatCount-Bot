generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  photoUrl         String?         @map("photo_url")
  verified         DateTime?       @map("verified")
  twoFactorEnabled Boolean         @default(false)
  twoFactorSecret  String?
  telegramId       String?         @unique
  telegramUsername String?         @map("telegram_username")
  languageCode     String?         @map("language_code")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  targets          Target[]
  meals            Meal[]
  refreshTokens    RefreshToken[]
  apiRequests      ApiRequestLog[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Target {
  id            String @id @default(uuid())
  userId        String
  calorieTarget Int
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meal {
  id          String   @id @default(uuid())
  userId      String
  type        MealType
  timestamp   DateTime
  description String

  totalCalories Int
  totalProtein  Float
  totalFat      Float
  totalCarbs    Float

  // Дані про використання API
  usedModel    String?
  promptTokens Int?
  outputTokens Int?
  totalTokens  Int?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     MealItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meals")
}

model MealItem {
  id          String @id @default(uuid())
  mealId      String
  name        String
  amountGrams Float

  calories Float
  protein  Float
  fat      Float
  carbs    Float

  calories_str            String?
  carbohydrate_str        String?
  protein_str             String?
  fat_str                 String?
  saturated_fat_str       String?
  polyunsaturated_fat_str String?
  monounsaturated_fat_str String?
  cholesterol_str         String?
  sodium_str              String?
  potassium_str           String?
  fiber_str               String?
  sugar_str               String?
  vitamin_a_str           String?
  vitamin_c_str           String?
  calcium_str             String?
  iron_str                String?

  meal Meal @relation(fields: [mealId], references: [id])
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model ApiRequestLog {
  id           String   @id @default(uuid())
  timestamp    DateTime @default(now())
  userId       String?
  endpoint     String
  model        String
  promptTokens Int
  outputTokens Int
  totalTokens  Int
  cost         Float
  status       String // success, error, unrecognized
  errorMessage String?
  queryText    String?
  responseTime Int // in milliseconds

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("api_request_logs")
}
